JSON
JavaScript Object Notation
데이터를 저장하고 교환하는 데 사용되는 경량 데이터 교환 형식


자바스크립트 객체 표기법과 JSON 문법의 차이
1. JSON에서는 각 프로퍼티의 이름을 반드시 큰따옴표("바보")로 감싸야함
2. JSON에서는 값이 문자열인 경우 큰따옴표("바보")를 사용해야 합니다.

JSON에서는 undefined, NaN, Infinity 등을 사용할 수 없음

JSON에는 주석 사용 X


JSON 객체를 자바스크립트로 사용하는 방법 -> 자바스크립트로 변환해주는 JSON.parse 사용하기
fetch("https://www.google.com")
  .then((response) => response.text())
  .then((result) => {
    const users = JSON.parse(result);
    console.log(users.length);
    users.forEach((user)=>{
        console.log(user.name)
    });
  });

POST 리퀘스트를 헤드와 바디는 어떻게 생겼을까?

개발자도구의 Network 탭을 확인하기 → Headers 확인

Response 확인하면 무슨 일이 일어나는지도 알 수 있음

- PUT: 정보 수정하기
    
    ```json
    member = {
      어쩌고~ 수정된 내용
    }

    fetch("https://www.google.com/2",{
    method: 'PUT',
    body: JSON.stringihy(member),
    })
      .then((response) => response.text())
      .then((result) => { console.log(result);});
    ```
    

- DELETE: 정보 삭제하기 // body 필요 없음
    
    ```json
    fetch("https://www.google.com/2",{
    method: 'DELETE',
    })
      .then((response) => response.text())
      .then((result) => { console.log(result);});
    ```
    

중요한 점

- 어느 URL로 리퀘스트를 보내는지
- 무슨 메소드가 헤드로 설정되어있는지 (get, post, put, delete)

무슨 리스폰스를 받는지는 어떻게 설계되는걸까?

- Wed API
    - 개발자에는 두 종류가 있다 - 프론트엔드(URL로 리퀘스트를 보냄), 백엔드(리스폰스를 보내줌) →Wed API 설계: 서비스에서 사용될 모든 URL을 나열하고, 각각의 URL에 관한 예상 리퀘스트와 리스폰스의 내용을 정리
    - **Web API는 어떻게 설계해도 동작하는 데는 아무런 지장이 없다**
    ex) 직원의 정보를 추가하는 2가지 방법
        
        ```json
        회사 1
        
        (1) 'https://learn.codeit.kr/api/members' URL로   
        (2) 리퀘스트의 헤드에 POST 메소드를 설정하고,
        (3) 리퀘스트의 바디에 새 직원 정보를 넣어서 보내면 된다
        ```
        
        ```json
        회사 2
        
        (1) 'https://learn.codeit.kr/api/members' URL로
        (2) 리퀘스트의 헤더에 GET 메소드를 설정하고,
        (3) 리퀘스트의 바디에 새 직원 정보를 넣어서 보내면 된다
        ```
        
        → REST API를 기준으로 잘 설계되었는지 볼 수 있음


REST API: 가이드라인
  - REST architecture: 웹이 갖추어야 할 이상적인 아키텍처(구조)
  REST란? Representational State Transfer(표현적인 상태 이전)
  ㄴ 휴식인줄~